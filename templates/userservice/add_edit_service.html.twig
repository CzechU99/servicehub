{% extends 'base.html.twig' %}

{% block title %}ServiceHUB - {{ isEdit ? 'EDYTUJ' : 'DODAJ' }} USŁUGĘ{% endblock %}
{% block css %}
  <link rel="stylesheet" href="{{ asset('css/add_service.css') }}">
{% endblock %}

{% block body %}


    <div class="inputs">

      <div class="flashinfo">

        {% set break = false %}
        {% for child in dodajUslugeForm.children %}
          {% for error in child.vars.errors %}
            {% if not break %}
              <div class="error-message">
                  {{ error.message }}
              </div>
            {% endif %}
            {% set break = true %}
          {% endfor %}
        {% endfor %}
    
      </div>

      <div class="dodajForm">

        {{ form_start(dodajUslugeForm, { 'attr': {'enctype': 'multipart/form-data'} }) }}

          <div class="box">
          
            <div class="opis">NAZWA USŁUGI<span class="val">(min. 15 | maks. 100 znaków)</span></div>
            {{ form_widget(dodajUslugeForm.nazwaUslugi, {'attr': {'class': 'nazwauslugi', 'placeholder': 'PODAJ NAZWE USLUGI...'}}) }}
          
          </div>

          <div class="box">
          
            <div class="opis">OPIS USŁUGI<span class="val">(min. 100 | maks. 1000 znaków)</div>
            {{ form_widget(dodajUslugeForm.opisUslugi, {'attr': {'class': 'opisuslugi', 'placeholder': 'PODAJ NAZWE USLUGI...'}}) }}
          
          </div>

          <div class="box mt">

            <div id="image-upload-container">
              {{ form_widget(dodajUslugeForm.images, {'attr': {'class': 'image-input'}}) }}
              <label class="label" for="add_service_form_images">PRZEŚLIJ ZDJĘCIA<span class="val">(maks. 8 zdjęć | do 5MB każde)</label>
              <div id="image-gallery" class="gallery">
              
                {% for image in existingImages %}
                  <div class="gallery-item draggable" data-filename="{{ asset(image) }}">
                    <img src="{{ asset(image) }}" alt="Zdjęcie usługi">
                    <button type="button" class="remove-button">USUŃ</button>
                  </div>
                {% endfor %}
              
              </div>
            </div>

          </div>

          <div class="box mt-2">

            <div class="opis2 ml">PODAJ CENE</div>
            {{ form_widget(dodajUslugeForm.cena, {'attr': {'class': 'cena', 'placeholder': 'PLN'}}) }}

            <div class="opis2">DO NEGOCJACJI</div>
            {{ form_widget(dodajUslugeForm.doNegocjacji, {'attr': {'class': 'checkbox'}}) }}

            <div class="opis2">JESTEŚ FIRMĄ</div>
            {{ form_widget(dodajUslugeForm.czyFirma, {'attr': {'class': 'checkbox'}}) }}

            <div class="opis2">WYMIANA</div>
            {{ form_widget(dodajUslugeForm.czyWymiana, {'attr': {'class': 'checkbox'}}) }}

            <div class="opis2">STAWKA GODZ.</div>
            {{ form_widget(dodajUslugeForm.czyStawkaGodzinowa, {'attr': {'class': 'checkbox'}}) }}

          </div>

          <div class="box_check clr">

            <div class="opis">WYBIERZ KATEGORIE<span class="val">(min. 1 | maks. 3)</div>
            <div class="checkbox_all">
            <ul>
            {% for category in dodajUslugeForm.kategorie %}
              <li>
                <div class="category-item">
                  {{ form_label(category) }}
                  {{ form_widget(category, {'attr': {'class': 'selectbox'}}) }}
                </div>
              </li>
            {% endfor %}
            </ul>
            </div>

          </div>

          <button type="submit" class="btndodaj">{{ isEdit ? 'EDYTUJ' : 'DODAJ' }} USLUGĘ</button>

        {{ form_end(dodajUslugeForm) }}

      </div>

    </div>

    <script>

      document.querySelector('.cena').addEventListener('keydown', function (event) {
        const allowedKeys = [
          'Backspace', 'ArrowLeft', 'ArrowRight', 'Tab', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ',', 'Delete' 
        ];

        if (!allowedKeys.includes(event.key) && !event.key.match(/[0-9]/)) {
          event.preventDefault(); 
        }
      });

      document.addEventListener('DOMContentLoaded', () => {
        const checkboxes = document.querySelectorAll('.selectbox');
        const maxSelection = 3;

        function updateCheckboxes() {
          const checkedCount = document.querySelectorAll('.selectbox:checked').length;

          checkboxes.forEach(checkbox => {
            if (checkedCount >= maxSelection && !checkbox.checked) {
              checkbox.disabled = true;  
            } else {
              checkbox.disabled = false;  
            }
          });
        }

        checkboxes.forEach(checkbox => {
          checkbox.addEventListener('change', updateCheckboxes);
        });

        updateCheckboxes();
      });



      const imageInput = document.querySelector('.image-input');
      const gallery = document.getElementById('image-gallery');
      const errorMessage = document.getElementById('error-message'); 

      let imageFiles = []; 
      const maxFiles = 8; 
      const maxFileSizeMB = 5; 

      document.addEventListener('DOMContentLoaded', () => {
        const existingGalleryItems = gallery.querySelectorAll('.gallery-item');

        existingGalleryItems.forEach(item => {
          const filename = item.dataset.filename; 
          const imagePath = item.querySelector('img').src; 
              
          imageFiles.push({
            name: filename,
            path: imagePath,
            existing: true 
          });

          const removeButton = item.querySelector('.remove-button');
          removeButton.addEventListener('click', () => {
            gallery.removeChild(item);
            imageFiles = imageFiles.filter(f => f.name !== filename);
            updateInput();
          });
        });

        updateInput();
      });

      imageInput.addEventListener('change', (event) => {
        const files = Array.from(event.target.files);
        let skippedFiles = 0; 

        const remainingSlots = maxFiles - imageFiles.length;

        if (remainingSlots <= 0) {
          return;
        }

        const filesToAdd = files.slice(0, remainingSlots); 

        filesToAdd.forEach(file => {
          if (!file.type.startsWith('image/')) {
            skippedFiles++;
            return;
          }

          if (file.size > maxFileSizeMB * 1024 * 1024) {
            skippedFiles++;
            return;
          }

          const reader = new FileReader();
          reader.onload = (e) => {
            const galleryItem = document.createElement('div');
            galleryItem.classList.add('gallery-item', 'draggable');
            galleryItem.dataset.filename = file.name;

            const img = document.createElement('img');
            img.src = e.target.result;

            const removeButton = document.createElement('button');
            removeButton.classList.add('remove-button');
            removeButton.textContent = 'USUŃ';
            removeButton.addEventListener('click', () => {
                gallery.removeChild(galleryItem);
                imageFiles = imageFiles.filter(f => f.name !== file.name);
                updateInput();
            });

            galleryItem.appendChild(img);
            galleryItem.appendChild(removeButton);
            gallery.appendChild(galleryItem);

            imageFiles.push(file);
            updateInput(); 
          };
          reader.readAsDataURL(file);
        });
      });

      function updateInput() {
        const dataTransfer = new DataTransfer(); 

        imageFiles.forEach(file => {
          if (file.existing) {
            const blob = fetch(file.path)
              .then(res => res.blob())
              .then(blob => {
                const existingFile = new File([blob], file.name, { type: blob.type });
                dataTransfer.items.add(existingFile);
                imageInput.files = dataTransfer.files;
              });
          } else {
            dataTransfer.items.add(file); 
          }
        });

        imageInput.files = dataTransfer.files;
      }

      new Sortable(gallery, {
        animation: 150,
        ghostClass: 'draggable-ghost',
        onEnd: () => {
          const reorderedFiles = [];
          Array.from(gallery.children).forEach(item => {
            const filename = item.dataset.filename;
            const file = imageFiles.find(f => f.name === filename);
            if (file) {
                reorderedFiles.push(file);
            }
          });
          imageFiles = reorderedFiles;
          updateInput(); 
        }
      });

    </script>

{% endblock %}
